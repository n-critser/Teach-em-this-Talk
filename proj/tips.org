#+STARTUP: overview
#+AUTHOR: n-critser
#+TITLE: tips.org

* Notes from AirbNB
** BreakDown
***  WEB SITE OLD STyle
Client  ---thin
Server  ----fat

*** WEB APP
client   ----Fat
Server   ----Thin


** Single Page App
old Gmail
*** Never a fullpage refresh
*** navigate the app 
*** app logic on the client
*** fetch data on demand (not a new page)
** HOW TO DO IT
*** JavaScript
*** Why is JS big now?
JS is faster !!
Google V8 JS engine
Browser Features (HTML5- Webgl, pushState, localStorage)
User Expectation

** HOW BnB did it
*** BackBone.js MV* Library
Backbone.View
Backbone.Model
Backbone.Collection
Backbone.Router

*** JQuery 
** Think about building an Application , rather than manipulating HTML
** Push State ( change url in browser without full refresh)
** Easy Way VS Hard Way
*** Easy Way single page app
JS app running on the Client
Server Tech agnostic
Poor SEO : not crawlable (google fail)
Most App runs on the client (Server is Static Assets and Logs)
Performance hit to download & get JS before rendering

*** Hard Way  : The holy grail
Client / Server Bulking : 
Everything runs on both sides.  
Fast refresh w/ pushState (refresh ---> full page HTML)
Provides SEO and good user experience ! Analytics 
Initial PageLoad is faster
*** Enter Rendr : 
Backbone.js + Node.js 
Pulls Backbone to the server (from the client)
Write you app once : running on either side of the browser
* Cool stuff
** ember 
** Derby 
** Meteor JS 
* hacking
** Technological vigilantism
** Cross-functional Collaboration
** Creating and Learning Together


* copyWriting
** from stanford startup eng...
Copywriting
Here are some high level copywriting principles.
• Homepage message: If it’s not a homepage message, it’s not a message. Don’t expect
visitors to figure out what the product is about on the third page in; your enemy is the
back button. That said, only spend energy on the homepage if it’s a significant source
of customers. If it isn’t (e.g. if your sales come through a salesforce), you can leave the
homepage alone for a surprisingly long time.
• Work backwards from the press release: Amazon writes the press release before they
build the product. In doing this, you will find yourself figuring out what features are
news and which ones are noise. Take a look at their press releases to get a sense for
tone.
• Someone is wrong on the internet: Get a friend, have them pull up as many competitor
webpages as possible, and you will quickly find yourself explaining to them why those
companies are terrible and why yours is different. This is valuable. Write down your
immediate gut reaction as to why your product is indeed different. Put this into a feature
matrix (example) and then determine whether your new features really differentiate your
product substantially.
• Simple and factual : Do your best to turn vague features (“PageRank provides better
search quality”) into concrete facts and statistics (“X% of searchers who used both Blekko
and Google preferred Blekko. Find out why.”). Use Oracle style marketing: less is more,
hammering one point above the fold and keeping the rest in the secondary copy.
• Call to action: You want someone to do something when they come to your page, like
buy something or sign up on an email form. Make sure you reiterate this “call to action”
many times. Make the call to action button cartoonishly large and in a different font.
You can put these principles to work with your crowdfunder.


* heroku destroy CLI
$ heroku apps:destroy -a shielded-meadow-9016
$ heroku apps
=== My Apps
warm-springs-4352
young-coast-6565

* Node express serving example
** http://stackoverflow.com/questions/10046039/nodejs-send-file-in-response
var http = require('http'),
    fileSystem = require('fs'),
    path = require('path');

http.createServer(function(request, response) {
    var filePath = path.join(__dirname, 'myfile.mp3');
    var stat = fileSystem.statSync(filePath);

    response.writeHead(200, {
        'Content-Type': 'audio/mpeg',
        'Content-Length': stat.size
    });

    var readStream = fileSystem.createReadStream(filePath);
    // We replaced all the event handlers with a simple call to readStream.pipe()
    readStream.pipe(response);
})
.listen(2000);

